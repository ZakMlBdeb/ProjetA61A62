# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Github-Docker Hub MLOps pipeline


env:
  DOCKER_USER: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  REPO_NAME: ${{secrets.DOCKERHUB_REPO}}



on:
  push:
    branches:
    - main

jobs:


  ci_pipeline: 
       runs-on: ubuntu-latest  
       
       steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0


        - name: Set up Python 3.9
          uses: actions/setup-python@v3
          with:
            python-version: 3.9


        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi

  cd_pipeline:

      runs-on: ubuntu-latest 
      needs: [ci_pipeline]
 
      steps:

      - uses: actions/checkout@v3 
      - name: docker login
        run: | # log into docker hub account
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  
      - name: Get current date # get the date of the build
        id: date
        run: echo "date=$(date +'%Y-%m-%d--%M-%S')" >>$GITHUB_OUTPUT

      - name: Build the Docker image # push The image to the docker hub
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
